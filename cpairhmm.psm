%--------------------------------------------
% Constrained Pair HMM
% Christian Theil Have, Jan. 2010.
%--------------------------------------------
:- [constraint_integration].
:- [constraint_checkers].
:- [constraints].

% List of symbols which may be used in sequences aligned.
% You will need change this to the alphabet of your sequences.
alphabet([a,c,g,t]).


emit_pattern(match, A, B, [A,B]).
emit_pattern(delete, _, B, [-,B]).
emit_pattern(insert, A, _, [A,-]).

values(emit(State), ABSet) :-
	alphabet(A),
	findall(AB, (member(X,A),member(Y,A),emit_pattern(State,X,Y,AB)), ABList),
	eliminate_duplicate(ABList, ABSet).

% Transition variables
values(trans(begin),[match,delete,insert]).
values(trans(match), [match,delete,insert]).
values(trans(insert), [match,insert]).
values(trans(delete), [match,delete]).

cpairhmm(InputA,InputB,Alignment) :-
	init_global_constraint_store,
	cpairhmm(begin,InputA,InputB,Alignment).

cpairhmm(PreviousState,[],[B|BRest],[Emit|AlignmentRest]) :-
	msw(trans(PreviousState), delete),
	msw(emit(delete), Emit),
	emit_pattern(delete,-,B,Emit),
	check_constraints([delete,Emit]),
	cpairhmm(delete,[],BRest,AlignmentRest).

cpairhmm(PreviousState,[A|ARest],[],[Emit|AlignmentRest]) :-
	msw(trans(PreviousState), insert),
	msw(emit(insert), Emit),
	emit_pattern(insert,A,-,Emit),
	check_constraints([insert,Emit]),
	cpairhmm(insert,ARest,[],AlignmentRest).

cpairhmm(PreviousState,[A|ARest],[B|BRest],[Emit|AlignmentRest]) :-
	msw(trans(reviousState), NextState),
	msw(emit(NextState),Emit),
	emit_pattern(NextState,A,B,Emit),
	check_constraints([NextState,Emit]),
	((NextState==match,
	  cpairhmm(NextState,ARest,BRest,AlignmentRest))
	;
	 ((NextState==insert,
	  cpairhmm(NextState,ARest,[B|BRest],AlignmentRest)))
	;
	 ((NextState==delete,
	  cpairhmm(NextState,[A|ARest],BRest,AlignmentRest)))).

cpairhmm(_,[],[],[]).